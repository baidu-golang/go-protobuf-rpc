// Go support for Protocol Buffers RPC which compatiable with https://github.com/Baidu-ecom/Jprotobuf-rpc-socket
//
// Copyright 2002-2007 the original author or authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go.
// source: Request.proto
// DO NOT EDIT!

/*
Package baidurpc is a generated protocol buffer package.

It is generated from these files:
	Request.proto

It has these top-level messages:
	Request
	Response
	ChunkInfo
	RpcMeta
*/
package baidurpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Request struct {
	ServiceName      *string `protobuf:"bytes,1,req,name=serviceName" json:"serviceName,omitempty"`
	MethodName       *string `protobuf:"bytes,2,req,name=methodName" json:"methodName,omitempty"`
	LogId            *int64  `protobuf:"varint,3,opt,name=logId" json:"logId,omitempty"`
	ExtraParam       []byte  `protobuf:"bytes,4,opt,name=extraParam" json:"extraParam,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return nil, []int{0} }

func (m *Request) GetServiceName() string {
	if m != nil && m.ServiceName != nil {
		return *m.ServiceName
	}
	return ""
}

func (m *Request) GetMethodName() string {
	if m != nil && m.MethodName != nil {
		return *m.MethodName
	}
	return ""
}

func (m *Request) GetLogId() int64 {
	if m != nil && m.LogId != nil {
		return *m.LogId
	}
	return 0
}

func (m *Request) GetExtraParam() []byte {
	if m != nil {
		return m.ExtraParam
	}
	return nil
}

type Response struct {
	ErrorCode        *int32  `protobuf:"varint,1,opt,name=errorCode" json:"errorCode,omitempty"`
	ErrorText        *string `protobuf:"bytes,2,opt,name=errorText" json:"errorText,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return nil, []int{1} }

func (m *Response) GetErrorCode() int32 {
	if m != nil && m.ErrorCode != nil {
		return *m.ErrorCode
	}
	return 0
}

func (m *Response) GetErrorText() string {
	if m != nil && m.ErrorText != nil {
		return *m.ErrorText
	}
	return ""
}

type ChunkInfo struct {
	StreamId         *int64 `protobuf:"varint,1,req,name=streamId" json:"streamId,omitempty"`
	ChunkId          *int64 `protobuf:"varint,2,req,name=chunkId" json:"chunkId,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ChunkInfo) Reset()                    { *m = ChunkInfo{} }
func (m *ChunkInfo) String() string            { return proto.CompactTextString(m) }
func (*ChunkInfo) ProtoMessage()               {}
func (*ChunkInfo) Descriptor() ([]byte, []int) { return nil, []int{2} }

func (m *ChunkInfo) GetStreamId() int64 {
	if m != nil && m.StreamId != nil {
		return *m.StreamId
	}
	return 0
}

func (m *ChunkInfo) GetChunkId() int64 {
	if m != nil && m.ChunkId != nil {
		return *m.ChunkId
	}
	return 0
}

type RpcMeta struct {
	Request            *Request   `protobuf:"bytes,1,opt,name=request" json:"request,omitempty"`
	Response           *Response  `protobuf:"bytes,2,opt,name=response" json:"response,omitempty"`
	CompressType       *int32     `protobuf:"varint,3,opt,name=compressType" json:"compressType,omitempty"`
	CorrelationId      *int64     `protobuf:"varint,4,opt,name=correlationId" json:"correlationId,omitempty"`
	AttachmentSize     *int32     `protobuf:"varint,5,opt,name=attachmentSize" json:"attachmentSize,omitempty"`
	ChunkInfo          *ChunkInfo `protobuf:"bytes,6,opt,name=chunkInfo" json:"chunkInfo,omitempty"`
	AuthenticationData []byte     `protobuf:"bytes,7,opt,name=authenticationData" json:"authenticationData,omitempty"`
	XXX_unrecognized   []byte     `json:"-"`
}

func (m *RpcMeta) Reset()                    { *m = RpcMeta{} }
func (m *RpcMeta) String() string            { return proto.CompactTextString(m) }
func (*RpcMeta) ProtoMessage()               {}
func (*RpcMeta) Descriptor() ([]byte, []int) { return nil, []int{3} }

func (m *RpcMeta) GetRequest() *Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *RpcMeta) GetResponse() *Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *RpcMeta) GetCompressType() int32 {
	if m != nil && m.CompressType != nil {
		return *m.CompressType
	}
	return 0
}

func (m *RpcMeta) GetCorrelationId() int64 {
	if m != nil && m.CorrelationId != nil {
		return *m.CorrelationId
	}
	return 0
}

func (m *RpcMeta) GetAttachmentSize() int32 {
	if m != nil && m.AttachmentSize != nil {
		return *m.AttachmentSize
	}
	return 0
}

func (m *RpcMeta) GetChunkInfo() *ChunkInfo {
	if m != nil {
		return m.ChunkInfo
	}
	return nil
}

func (m *RpcMeta) GetAuthenticationData() []byte {
	if m != nil {
		return m.AuthenticationData
	}
	return nil
}
