// Go support for Protocol Buffers RPC which compatiable with https://github.com/Baidu-ecom/Jprotobuf-rpc-socket
//
// Copyright 2002-2007 the original author or authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go.
// source: Request.proto
// DO NOT EDIT!
/*
enum Errno {
    // Errno caused by client
    ENOSERVICE              = 1001;  // Service not found
    ENOMETHOD               = 1002;  // Method not found
    EREQUEST                = 1003;  // Bad Request
    ERPCAUTH                = 1004;  // Unauthorized, can't be called EAUTH
                                     // directly which is defined in MACOSX
    ETOOMANYFAILS           = 1005;  // Too many sub calls failed
    EPCHANFINISH            = 1006;  // [Internal] ParallelChannel finished
    EBACKUPREQUEST          = 1007;  // Sending backup request
    ERPCTIMEDOUT            = 1008;  // RPC call is timed out
    EFAILEDSOCKET           = 1009;  // Broken socket
    EHTTP                   = 1010;  // Bad http call
    EOVERCROWDED            = 1011;  // The server is overcrowded
    ERTMPPUBLISHABLE        = 1012;  // RtmpRetryingClientStream is publishable
    ERTMPCREATESTREAM       = 1013;  // createStream was rejected by the RTMP server
    EEOF                    = 1014;  // Got EOF
    EUNUSED                 = 1015;  // The socket was not needed
    ESSL                    = 1016;  // SSL related error
    EH2RUNOUTSTREAMS        = 1017;  // The H2 socket was run out of streams
    EREJECT                 = 1018;  // The Request is rejected

    // Errno caused by server
    EINTERNAL               = 2001;  // Internal Server Error
    ERESPONSE               = 2002;  // Bad Response
    ELOGOFF                 = 2003;  // Server is stopping
    ELIMIT                  = 2004;  // Reached server's limit on resources
    ECLOSE                  = 2005;  // Close socket initiatively
    EITP                    = 2006;  // Failed Itp response
}


*/

/*
Package baidurpc is a generated protocol buffer package.

It is generated from these files:
	Request.proto

It has these top-level messages:
	Request
	Response
	ChunkInfo
	RpcMeta
*/
package baidurpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Request struct {
	ServiceName       *string                   `protobuf:"bytes,1,req,name=serviceName" json:"serviceName,omitempty"`
	MethodName        *string                   `protobuf:"bytes,2,req,name=methodName" json:"methodName,omitempty"`
	LogId             *int64                    `protobuf:"varint,3,opt,name=logId" json:"logId,omitempty"`
	TraceId           *int64                    `protobuf:"varint,4,opt,name=traceId" json:"traceId,omitempty"`
	SpanId            *int64                    `protobuf:"varint,5,opt,name=spanId" json:"spanId,omitempty"`
	ParentSpanId      *int64                    `protobuf:"varint,6,opt,name=parentSpanId" json:"parentSpanId,omitempty"`
	RpcRequestMetaExt []*RpcRequestMetaExtField `protobuf:"bytes,7,rep,name=rpcRequestMetaExt" json:"rpcRequestMetaExt,omitempty"`
	ExtraParam        []byte                    `protobuf:"bytes,110,opt,name=extraParam" json:"extraParam,omitempty"`
	XXX_unrecognized  []byte                    `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}

func (m *Request) GetServiceName() string {
	if m != nil && m.ServiceName != nil {
		return *m.ServiceName
	}
	return ""
}

func (m *Request) GetMethodName() string {
	if m != nil && m.MethodName != nil {
		return *m.MethodName
	}
	return ""
}

func (m *Request) GetLogId() int64 {
	if m != nil && m.LogId != nil {
		return *m.LogId
	}
	return 0
}

func (m *Request) GetExtraParam() []byte {
	if m != nil {
		return m.ExtraParam
	}
	return nil
}

type RpcRequestMetaExtField struct {
	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *RpcRequestMetaExtField) Reset()         { *m = RpcRequestMetaExtField{} }
func (m *RpcRequestMetaExtField) String() string { return proto.CompactTextString(m) }
func (*RpcRequestMetaExtField) ProtoMessage()    {}

func (m *RpcRequestMetaExtField) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *RpcRequestMetaExtField) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type Response struct {
	ErrorCode        *int32  `protobuf:"varint,1,opt,name=errorCode" json:"errorCode,omitempty"`
	ErrorText        *string `protobuf:"bytes,2,opt,name=errorText" json:"errorText,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}

func (m *Response) GetErrorCode() int32 {
	if m != nil && m.ErrorCode != nil {
		return *m.ErrorCode
	}
	return 0
}

func (m *Response) GetErrorText() string {
	if m != nil && m.ErrorText != nil {
		return *m.ErrorText
	}
	return ""
}

type ChunkInfo struct {
	StreamId         *int64 `protobuf:"varint,1,req,name=streamId" json:"streamId,omitempty"`
	ChunkId          *int64 `protobuf:"varint,2,req,name=chunkId" json:"chunkId,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ChunkInfo) Reset()         { *m = ChunkInfo{} }
func (m *ChunkInfo) String() string { return proto.CompactTextString(m) }
func (*ChunkInfo) ProtoMessage()    {}

func (m *ChunkInfo) GetStreamId() int64 {
	if m != nil && m.StreamId != nil {
		return *m.StreamId
	}
	return 0
}

func (m *ChunkInfo) GetChunkId() int64 {
	if m != nil && m.ChunkId != nil {
		return *m.ChunkId
	}
	return 0
}

type RpcMeta struct {
	Request            *Request   `protobuf:"bytes,1,opt,name=request" json:"request,omitempty"`
	Response           *Response  `protobuf:"bytes,2,opt,name=response" json:"response,omitempty"`
	CompressType       *int32     `protobuf:"varint,3,opt,name=compressType" json:"compressType,omitempty"`
	CorrelationId      *int64     `protobuf:"varint,4,opt,name=correlationId" json:"correlationId,omitempty"`
	AttachmentSize     *int32     `protobuf:"varint,5,opt,name=attachmentSize" json:"attachmentSize,omitempty"`
	ChunkInfo          *ChunkInfo `protobuf:"bytes,6,opt,name=chunkInfo" json:"chunkInfo,omitempty"`
	AuthenticationData []byte     `protobuf:"bytes,7,opt,name=authenticationData" json:"authenticationData,omitempty"`
	XXX_unrecognized   []byte     `json:"-"`
}

func (m *RpcMeta) Reset()         { *m = RpcMeta{} }
func (m *RpcMeta) String() string { return proto.CompactTextString(m) }
func (*RpcMeta) ProtoMessage()    {}

func (m *RpcMeta) GetRequest() *Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *RpcMeta) GetResponse() *Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *RpcMeta) GetCompressType() int32 {
	if m != nil && m.CompressType != nil {
		return *m.CompressType
	}
	return 0
}

func (m *RpcMeta) GetCorrelationId() int64 {
	if m != nil && m.CorrelationId != nil {
		return *m.CorrelationId
	}
	return 0
}

func (m *RpcMeta) GetAttachmentSize() int32 {
	if m != nil && m.AttachmentSize != nil {
		return *m.AttachmentSize
	}
	return 0
}

func (m *RpcMeta) GetChunkInfo() *ChunkInfo {
	if m != nil {
		return m.ChunkInfo
	}
	return nil
}

func (m *RpcMeta) GetAuthenticationData() []byte {
	if m != nil {
		return m.AuthenticationData
	}
	return nil
}
